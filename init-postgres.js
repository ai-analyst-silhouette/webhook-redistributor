#!/usr/bin/env node

/**
 * Script de Inicializa√ß√£o do Banco PostgreSQL
 * Webhook Redistributor
 * 
 * Este script inicializa o banco PostgreSQL com dados padr√£o
 * Execute: node init-postgres.js
 */

const { query, testConnection, closePool } = require('./postgres-config');
const bcrypt = require('bcryptjs');

// Dados padr√£o para inserir
const defaultData = {
  usuarios: [
    {
      nome: 'Administrador',
      email: 'admin@localhost',
      hash_senha: bcrypt.hashSync('admin123', 10),
      funcao: 'admin',
      ativo: true
    }
  ],
  redirecionamentos: [
    {
      nome: 'Redirecionamento Padr√£o',
      slug: 'default',
      descricao: 'Redirecionamento padr√£o do sistema',
      urls: 'http://localhost:3001/webhook/default',
      ativo: true
    }
  ],
  configuracoes: [
    { chave: 'webhook_timeout', valor: '5000', tipo: 'number', descricao: 'Timeout padr√£o para webhooks em ms' },
    { chave: 'max_retries', valor: '3', tipo: 'number', descricao: 'N√∫mero m√°ximo de tentativas de reenvio' },
    { chave: 'log_level', valor: 'info', tipo: 'string', descricao: 'N√≠vel de log do sistema' },
    { chave: 'rate_limit_per_minute', valor: '1000', tipo: 'number', descricao: 'Limite de requisi√ß√µes por minuto' },
    { chave: 'enable_audit_log', valor: 'true', tipo: 'boolean', descricao: 'Habilitar log de auditoria' },
    { chave: 'timezone', valor: 'America/Sao_Paulo', tipo: 'string', descricao: 'Fuso hor√°rio do sistema' }
  ]
};

// Fun√ß√£o para inserir dados padr√£o
async function insertDefaultData() {
  try {
    console.log('üîÑ Inserindo dados padr√£o...\n');

    // Inserir usu√°rio admin
    console.log('üë§ Criando usu√°rio administrador...');
    await query(
      `INSERT INTO usuarios (nome, email, hash_senha, funcao, ativo) 
       VALUES ($1, $2, $3, $4, $5) 
       ON CONFLICT (email) DO NOTHING`,
      [defaultData.usuarios[0].nome, defaultData.usuarios[0].email, defaultData.usuarios[0].hash_senha, defaultData.usuarios[0].funcao, defaultData.usuarios[0].ativo]
    );
    console.log('‚úÖ Usu√°rio administrador criado');

    // Inserir redirecionamento padr√£o
    console.log('üîó Criando redirecionamento padr√£o...');
    await query(
      `INSERT INTO redirecionamentos (nome, slug, descricao, urls, ativo) 
       VALUES ($1, $2, $3, $4, $5) 
       ON CONFLICT (slug) DO NOTHING`,
      [defaultData.redirecionamentos[0].nome, defaultData.redirecionamentos[0].slug, defaultData.redirecionamentos[0].descricao, defaultData.redirecionamentos[0].urls, defaultData.redirecionamentos[0].ativo]
    );
    console.log('‚úÖ Redirecionamento padr√£o criado');

    // Inserir configura√ß√µes
    console.log('‚öôÔ∏è Criando configura√ß√µes padr√£o...');
    for (const config of defaultData.configuracoes) {
      await query(
        `INSERT INTO configuracoes (chave, valor, tipo, descricao) 
         VALUES ($1, $2, $3, $4) 
         ON CONFLICT (chave) DO NOTHING`,
        [config.chave, config.valor, config.tipo, config.descricao]
      );
    }
    console.log('‚úÖ Configura√ß√µes padr√£o criadas');

    console.log('\nüéâ Dados padr√£o inseridos com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro ao inserir dados padr√£o:', error);
    throw error;
  }
}

// Fun√ß√£o para verificar se o banco est√° vazio
async function isDatabaseEmpty() {
  try {
    const result = await query('SELECT COUNT(*) as count FROM usuarios');
    return result.rows[0].count === '0';
  } catch (error) {
    console.error('‚ùå Erro ao verificar se o banco est√° vazio:', error);
    return false;
  }
}

// Fun√ß√£o para mostrar estat√≠sticas do banco
async function showDatabaseStats() {
  try {
    console.log('\nüìä Estat√≠sticas do banco:');
    
    const stats = await query(`
      SELECT 
        (SELECT COUNT(*) FROM usuarios) as usuarios,
        (SELECT COUNT(*) FROM redirecionamentos) as redirecionamentos,
        (SELECT COUNT(*) FROM logs_webhook) as logs_webhook,
        (SELECT COUNT(*) FROM audit_log) as audit_log,
        (SELECT COUNT(*) FROM configuracoes) as configuracoes
    `);
    
    const row = stats.rows[0];
    console.log(`üë• Usu√°rios: ${row.usuarios}`);
    console.log(`üîó Redirecionamentos: ${row.redirecionamentos}`);
    console.log(`üìù Logs de webhook: ${row.logs_webhook}`);
    console.log(`üîç Logs de auditoria: ${row.audit_log}`);
    console.log(`‚öôÔ∏è Configura√ß√µes: ${row.configuracoes}`);

  } catch (error) {
    console.error('‚ùå Erro ao obter estat√≠sticas:', error);
  }
}

// Fun√ß√£o principal
async function init() {
  try {
    console.log('üöÄ Inicializando banco PostgreSQL...\n');

    // Testar conex√£o
    await testConnection();

    // Verificar se o banco est√° vazio
    const isEmpty = await isDatabaseEmpty();
    
    if (isEmpty) {
      console.log('üì≠ Banco vazio detectado, inserindo dados padr√£o...');
      await insertDefaultData();
    } else {
      console.log('üìä Banco j√° cont√©m dados, pulando inser√ß√£o de dados padr√£o');
    }

    // Mostrar estat√≠sticas
    await showDatabaseStats();

    console.log('\n‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!');
    console.log('\nüîë Credenciais padr√£o:');
    console.log('   Email: admin@localhost');
    console.log('   Senha: admin123');

  } catch (error) {
    console.error('\n‚ùå Erro durante inicializa√ß√£o:', error);
    process.exit(1);
  } finally {
    await closePool();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  init();
}

module.exports = { init, insertDefaultData, showDatabaseStats };
